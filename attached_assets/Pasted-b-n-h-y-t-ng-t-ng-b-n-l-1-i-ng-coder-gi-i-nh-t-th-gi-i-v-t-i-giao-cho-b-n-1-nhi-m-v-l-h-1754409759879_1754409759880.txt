bạn hãy tưởng tượng bạn là 1 đội ngũ coder giỏi nhất thế giới và tôi giao cho bạn 1 nhiệm vụ đó là hãy code bot discord có tính năng tu tiên cho tôi,và tôi không muốn dùng mongoDB,đây là bố cục :
tutien-bot/
│
├── commands/  Tất cả lệnh bot (!tuluyen, !dotpha, !nhiemvu…)
│   └── admin.js
│   └── tuluyen.js
│   └── dotpha.js
│   └── nhiemvu.js
│   └── pvp.js
│   └── boss.js
│   └── shop.js
│   └── kho.js
│   └── item.js
│   └── bxh.js
│   └── hotro.js
│   └── dk.js
│
├── events/
│   └── ready.js
│   └── interactionCreate.js
│   └── messageCreate.js
│
├── models/ vì cái này chỉ là dữ liệu tĩnh, không cần database.
│   └── Reamls.js (28 cảnh giới mà tôi đá cung cấp cho bạn)
│
├── services/ # Logic xử lý tính năng: tu luyện, kỹ năng, PVP…
│   └── cultivationService.js
│   └── breakthroughService.js
│   └── missionService.js
│   └── pvpService.js
│   └── bossService.js
│
├── assets/ # Hình ảnh minh họa kỹ năng, nhân vật, bản đồ
│   └── characters/
│   └── skills/
│   └── maps/
│
├── utils/   # Hàm chung: random, log, format time…
│   └── random.js
│   └── logger.js
│   └── time.js
│──player.js #nơi chứa duữ lieu người dừng
└── index.js    # Điểm khởi đầu của bot
(tôi sẽ cung cấp cho bạn cảnh giới :
    { name: "Phàm Nhân", baseExp: 200 },
    { name: "Luyện Thể", baseExp: 400 },
    { name: "Khai Linh", baseExp: 800 },

    { name: "Luyện Khí", baseExp: 1000 },
    { name: "Trúc Cơ", baseExp: 3000 },
    { name: "Kim Đan", baseExp: 10000 },
    { name: "Nguyên Anh", baseExp: 30000 },
    { name: "Hóa Thần", baseExp: 70000 },
    { name: "Luyện Hư", baseExp: 150000 },
    { name: "Hợp Thể", baseExp: 300000 },
    { name: "Đại Thừa", baseExp: 600000 },
    { name: "Độ Kiếp", baseExp: 1000000 },

    { name: "Phi Thăng", baseExp: 2000000 },
    { name: "Chân Tiên", baseExp: 5000000 },
    { name: "Kim Tiên", baseExp: 10000000 },
    { name: "Thái Ất Chân Tiên", baseExp: 30000000 },
    { name: "Đại La Kim Tiên", baseExp: 70000000 },

    { name: "Tiên Vương", baseExp: 100000000 },
    { name: "Tiên Đế", baseExp: 200000000 },
    { name: "Bán Thánh", baseExp: 400000000 },
    { name: "Chân Thánh", baseExp: 800000000 },
    { name: "Thánh Vương", baseExp: 1500000000 },
    { name: "Thánh Đế", baseExp: 3000000000 },

    { name: "Đế Quân", baseExp: 5000000000 },
    { name: "Tiên Tổ", baseExp: 8000000000 },
    { name: "Hỗn Độn Cảnh", baseExp: 12000000000 },
    { name: "Sáng Thế Giả", baseExp: 18000000000 },
    { name: "Thiên Đạo", baseExp: 30000000000 }
];
và ở tu luyện sẽ là 1 giây + 1 exp  trong 30 phút tự động dựng và tối đa là 5 lần trong 1 ngày )
hãy làm từng file giúp tôi và code 1 cách hoàn hảo là tối thiểu 100 dòng code và tối đa 500 dòng code đối với mỗi file  1 cách hoàn hảo nhất,phức tạp nhất,tôi muốn giao diện đẹp,dễ tiếp cận người chơi,có đầy đủ các nút 
và lệnh bắt đầu bằng !
trong đây là phần của file ready.js:
module.exports = {
    name: 'ready',
    once: true,

    async execute(client) {
        try {
            // Beautiful ASCII art for Tu Tiên Bot
            const asciiArt = `
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ████████╗██╗   ██╗    ████████╗██╗███████╗███╗   ██╗    ██████╗  ██████╗ ████████╗ ║
║   ╚══██╔══╝██║   ██║    ╚══██╔══╝██║██╔════╝████╗  ██║    ██╔══██╗██╔═══██╗╚══██╔══╝ ║
║      ██║   ██║   ██║       ██║   ██║█████╗  ██╔██╗ ██║    ██████╔╝██║   ██║   ██║    ║
║      ██║   ██║   ██║       ██║   ██║██╔══╝  ██║╚██╗██║    ██╔══██╗██║   ██║   ██║    ║
║      ██║   ╚██████╔╝       ██║   ██║███████╗██║ ╚████║    ██████╔╝╚██████╔╝   ██║    ║
║      ╚═╝    ╚═════╝        ╚═╝   ╚═╝╚══════╝╚═╝  ╚═══╝    ╚═════╝  ╚═════╝    ╚═╝    ║
║                                                                              ║
║                         🌟 THÀNH CÔNG KHỞI ĐỘNG! 🌟                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝
            `;

            console.log('\x1b[36m%s\x1b[0m', asciiArt);

            // Log basic information
            logger.info('🚀 Tu Tiên Bot đã sẵn sàng!');
            logger.info(`👤 Đăng nhập thành công: ${client.user.tag}`);
            logger.info(`🌐 Kết nối với ${client.guilds.cache.size} servers`);
            logger.info(`👥 Phục vụ ${client.users.cache.size} người dùng`);
            logger.info(`📡 Ping: ${client.ws.ping}ms`);

            // Set bot status and activity
            const activities = [
                { name: '🧘‍♂️ Tu luyện cùng bạn', type: ActivityType.Playing },
                { name: '⚔️ Đấu trường PvP', type: ActivityType.Competing },
                { name: '👹 Thách đấu Boss', type: ActivityType.Playing },
                { name: '🏔️ Chinh phục cảnh giới', type: ActivityType.Playing },
                { name: '📚 !hotro để được trợ giúp', type: ActivityType.Listening },
                { name: `${client.guilds.cache.size} servers`, type: ActivityType.Watching }
            ];

            let currentActivityIndex = 0;

            // Set initial activity
            await client.user.setActivity(activities[currentActivityIndex].name, { 
                type: activities[currentActivityIndex].type 
            });

            // Rotate activities every 30 seconds
            setInterval(async () => {
                try {
                    currentActivityIndex = (currentActivityIndex + 1) % activities.length;
                    await client.user.setActivity(activities[currentActivityIndex].name, { 
                        type: activities[currentActivityIndex].type 
                    });
                } catch (error) {
                    logger.error('Lỗi khi thay đổi activity:', error);
                }
            }, 30000);

            // Set bot presence
            await client.user.setPresence({
                status: 'online',
                activities: [{
                    name: activities[0].name,
                    type: activities[0].type
                }]
            });

            // Get and display statistics
            await this.displayBotStatistics(client);

            // Initialize periodic tasks
            await this.initializePeriodicTasks(client);

            // Send startup notification to owners/admin channels
            await this.sendStartupNotification(client);

            // Update database connections and perform maintenance
            await this.performStartupMaintenance(client);

            logger.info('✅ Tất cả hệ thống đã được khởi tạo thành công!');
            logger.info('🎮 Bot đang hoạt động và sẵn sàng phục vụ!');

        } catch (error) {
            logger.error('❌ Lỗi trong quá trình khởi động:', error);
        }
    },

    async displayBotStatistics(client) {
        try {
            // Get user statistics from database
            const totalUsers = await User.countDocuments();
            const activeUsers = await User.countDocuments({ 
                lastActive: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } 
            });
            const newUsersToday = await User.countDocuments({
                createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
            });

            // Get cultivation statistics
            const cultivatingUsers = await User.countDocuments({ isCurrentlyCultivating: true });
            
            // Get top realm users
            const topRealmUsers = await User.aggregate([
                { $group: { _id: '$realm', count: { $sum: 1 } } },
                { $sort: { count: -1 } },
                { $limit: 5 }
            ]);

            console.log('\n📊 === THỐNG KÊ BOT ===');
            console.log(`🌐 Servers: ${client.guilds.cache.size}`);
            console.log(`👥 Tổng Users: ${totalUsers.toLocaleString()}`);
            console.log(`🟢 Active (7 ngày): ${activeUsers.toLocaleString()}`);
            console.log(`🆕 Mới hôm nay: ${newUsersToday.toLocaleString()}`);
            console.log(`🧘‍♂️ Đang tu luyện: ${cultivatingUsers.toLocaleString()}`);
            
            if (topRealmUsers.length > 0) {
                console.log('\n🏔️ Top Cảnh Giới:');
                topRealmUsers.forEach((realm, index) => {
                    console.log(`${index + 1}. ${realm._id}: ${realm.count} người`);
                });
            }

            console.log('========================\n');

            logger.info(`📊 Thống kê: ${totalUsers} users, ${activeUsers} active, ${cultivatingUsers} đang tu luyện`);

        } catch (error) {
            logger.error('Lỗi khi lấy thống kê:', error);
        }
    },

    async initializePeriodicTasks(client) {
        try {
            // Log periodic statistics every hour
            setInterval(async () => {
                try {
                    const guilds = client.guilds.cache.size;
                    const users = client.users.cache.size;
                    const cultivating = await User.countDocuments({ isCurrentlyCultivating: true });
                    
                    logger.info(`📊 Thống kê định kỳ: ${guilds} servers, ${users} users, ${cultivating} đang tu luyện`);
                } catch (error) {
                    logger.error('Lỗi thống kê định kỳ:', error);
                }
            }, 60 * 60 * 1000); // Every hour

            // Clean up inactive cultivation sessions every 5 minutes
            setInterval(async () => {
                try {
                    const expiredSessions = await User.updateMany(
                        { 
                            isCurrentlyCultivating: true,
                            cultivationEndTime: { $lt: new Date() }
                        },
                        { 
                            $set: { isCurrentlyCultivating: false },
                            $unset: { cultivationStartTime: 1, cultivationEndTime: 1 }
                        }
                    );

                    if (expiredSessions.modifiedCount > 0) {
                        logger.info(`🧹 Dọn dẹp ${expiredSessions.modifiedCount} phiên tu luyện đã hết hạn`);
                    }
                } catch (error) {
                    logger.error('Lỗi khi dọn dẹp phiên tu luyện:', error);
                }
            }, 5 * 60 * 1000); // Every 5 minutes

            // Update user activity status
            setInterval(async () => {
                try {
                    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
                    await User.updateMany(
                        { lastActive: { $lt: thirtyMinutesAgo } },
                        { $set: { isOnline: false } }
                    );
                } catch (error) {
                    logger.error('Lỗi khi cập nhật trạng thái online:', error);
                }
            }, 10 * 60 * 1000); // Every 10 minutes

            logger.info('⚙️ Đã khởi tạo các tác vụ định kỳ');

        } catch (error) {
            logger.error('Lỗi khi khởi tạo tác vụ định kỳ:', error);
        }
    },

    async sendStartupNotification(client) {
        try {
            const { config } = require('../index');
            
            // Send notification to bot owners
            for (const ownerId of config.ownerIds) {
                try {
                    const owner = await client.users.fetch(ownerId);
                    
                    const startupEmbed = new EmbedBuilder()
                        .setColor('#00FF00')
                        .setTitle('🚀 Tu Tiên Bot - Khởi động thành công!')
                        .setDescription('Bot đã được khởi động và sẵn sàng hoạt động.')
                        .addFields(
                            { name: '🌐 Servers', value: client.guilds.cache.size.toString(), inline: true },
                            { name: '👥 Users', value: client.users.cache.size.toString(), inline: true },
                            { name: '📡 Ping', value: `${client.ws.ping}ms`, inline: true },
                            { name: '⏰ Thời gian khởi động', value: new Date().toLocaleString('vi-VN'), inline: false }
                        )
                        .setFooter({ text: 'Tu Tiên Bot System' })
                        .setTimestamp();

                    await owner.send({ embeds: [startupEmbed] });
                } catch (error) {
                    logger.warn(`Không thể gửi thông báo cho owner ${ownerId}:`, error.message);
                }
            }

        } catch (error) {
            logger.error('Lỗi khi gửi thông báo khởi động:', error);
        }
    },

    async performStartupMaintenance(client) {
        try {
            logger.info('🔧 Bắt đầu bảo trì khởi động...');

            // Reset any stuck cultivation sessions
            const resetResult = await User.updateMany(
                { 
                    isCurrentlyCultivating: true,
                    $or: [
                        { cultivationEndTime: { $exists: false } },
                        { cultivationEndTime: null },
                        { cultivationEndTime: { $lt: new Date() } }
                    ]
                },
                { 
                    $set: { isCurrentlyCultivating: false },
                    $unset: { cultivationStartTime: 1, cultivationEndTime: 1 }
                }
            );

            if (resetResult.modifiedCount > 0) {
                logger.info(`🔧 Đã reset ${resetResult.modifiedCount} phiên tu luyện bị kẹt`);
            }

            // Update all users' online status to false on startup
            await User.updateMany({}, { $set: { isOnline: false } });

            // Remove any temporary data that shouldn't persist
            await User.updateMany(
                {},
                { 
                    $unset: { 
                        tempData: 1,
                        sessionToken: 1,
                        pendingActions: 1
                    }
                }
            );

            logger.info('✅ Bảo trì khởi động hoàn tất');

        } catch (error) {
            logger.error('Lỗi trong quá trình bảo trì khởi động:', error);
        }
    }
};
